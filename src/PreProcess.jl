module PreProcess

export LoadParticlesFromCSV

using CSV
using DataFrames
using StaticArrays
using ..SimulationEquations

# This function loads in a CSV file of particles. Please note that it is simply a Vector{SVector{3,Float64}}
# so you can definely make your own! It was just much easier to use a particle distribution layout generated by
# for example DualSPHysics, than making code for this example to do that
function LoadParticlesFromCSV(dims, float_type, fluid_csv,boundary_csv)
    DF_FLUID = CSV.read(fluid_csv, DataFrame)
    DF_BOUND = CSV.read(boundary_csv, DataFrame)

    P1F = DF_FLUID[!,"Points:0"]
    P2F = DF_FLUID[!,"Points:1"]
    P3F = DF_FLUID[!,"Points:2"]
    P1B = DF_BOUND[!,"Points:0"]
    P2B = DF_BOUND[!,"Points:1"]
    P3B = DF_BOUND[!,"Points:2"]

    points1          = Vector{float_type}()
    points2          = Vector{float_type}()
    points3          = Vector{float_type}()
    density_fluid    = Vector{float_type}()
    density_bound    = Vector{float_type}()

    # Since the particles are produced in DualSPHysics
    for i = 1:length(P1B)
        if dims == 3
            push!(points1,P1B[i])
            push!(points2,P2B[i])
            push!(points3,P3B[i])
        elseif dims == 2
            push!(points1,P1B[i])
            push!(points2,P3B[i])
        end
        push!(density_bound,DF_BOUND.Rhop[i])
    end
    
    for i = 1:length(P1F)
        if dims == 3
            push!(points1,P1F[i])
            push!(points2,P2F[i])
            push!(points3,P3F[i])
        elseif dims == 2
            push!(points1,P1F[i])
            push!(points2,P3F[i])
        end
        push!(density_fluid,DF_FLUID.Rhop[i])
    end

    if dims == 3
        points = DimensionalData(points1,points2,points3)
    elseif dims == 2
        points = DimensionalData(points1,points2)
    end

    return points,density_fluid,density_bound
end

end